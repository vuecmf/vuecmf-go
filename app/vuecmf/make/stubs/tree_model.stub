package model

{{.import}}

// {{.model_name}} {{.comment}} 模型结构
type {{.model_name}} struct {
	Base
	{{.body}}
	Children *{{.model_name}}Tree `json:"children" gorm:"-"`
}


var {{.model_value}}Model *{{.model_name}}

// {{.model_name}}Model 获取{{.model_name}}模型实例
func {{.model_name}}Model() *{{.model_name}} {
	if {{.model_value}}Model == nil {
		{{.model_value}}Model = &{{.model_name}}{}
	}
	return {{.model_value}}Model
}

type {{.model_name}}Tree []*{{.model_name}}

// ToTree 将列表数据转换树形结构
func (m *{{.model_name}}) ToTree(data []*{{.model_name}}) {{.model_name}}Tree {
	treeData := make(map[uint]*{{.model_name}})
	for _, val := range data {
		treeData[val.Id] = val
	}

	var treeList {{.model_name}}Tree

	for _, item := range treeData {
		if item.Pid == 0 {
			treeList = append(treeList, item)
			continue
		}
		if pItem, ok := treeData[item.Pid]; ok {
			if pItem.Children == nil {
				children := {{.model_name}}Tree{item}
				pItem.Children = &children
				continue
			}
			*pItem.Children = append(*pItem.Children, item)
		}
	}

	return treeList

}
